import 'dart:convert';
import 'package:fitness_app/core/entities/exercise.dart'; // <<< Using your Exercise class directly

import 'package:fitness_app/features/exercise_tracker/domain/entities/scheduled_workout.dart';

class ScheduledWorkoutModel extends ScheduledWorkout {
  const ScheduledWorkoutModel({
    int? id,
    required String title,
    required DateTime dateTime,
    required List<Exercise> exercises,
    required String userId,
  }) : super(
          id: id,
          title: title,
          dateTime: dateTime,
          exercises: exercises,
          userId: userId,
        );

  factory ScheduledWorkoutModel.fromJson(Map<String, dynamic> map) {
    // Supabase jsonb column might return a String or a List<dynamic>
    final List<dynamic> exercisesJson = map['exercises'] is String
        ? jsonDecode(map['exercises']) // Decode if it's a JSON string
        : map['exercises']; // Otherwise, it's already a list/array

    return ScheduledWorkoutModel(
      id: map['id'] as int,
      title: map['title'] as String,
      dateTime: DateTime.parse(map['date_time'] as String).toLocal(), // Convert to local time
      exercises: List<Exercise>.from(
        exercisesJson.map((x) => Exercise.fromJson(x)), // <<< Directly using Exercise.fromJson
      ),
      userId: map['user_id'] as String,
    );
  }

  @override // Make sure to override if it was in the base class
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> jsonMap = {
      'title': title,
      // It's good practice to send DateTime as UTC to the database
      // and convert toLocal() when reading.
      'date_time': dateTime.toUtc().toIso8601String(),
      // Map each Exercise object to its JSON representation using exercise.toJson()
      'exercises': exercises.map((e) => e.toJson()).toList(),
      'user_id': userId,
    };

    // --- THE CRITICAL FIX ---
    // Only include 'id' in the JSON map if it is NOT null.
    // This allows the database (which is GENERATED BY DEFAULT AS IDENTITY)
    // to automatically assign an ID for new inserts.
    if (id != null) {
      jsonMap['id'] = id;
    }
    // --- END OF CRITICAL FIX ---

    return jsonMap;
  }

  // Convert ScheduledWorkout entity to ScheduledWorkoutModel
  factory ScheduledWorkoutModel.fromEntity(ScheduledWorkout workout) {
    return ScheduledWorkoutModel(
      id: workout.id,
      title: workout.title,
      dateTime: workout.dateTime,
      exercises: workout.exercises,
      userId: workout.userId,
    );
  }
}